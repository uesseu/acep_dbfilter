#!/usr/bin/env python3
from typing import List
from spreadsheet import SpreadSheet
from itertools import product
from argparse import ArgumentParser, RawTextHelpFormatter
from ninlib import EXPERIMENTAL_ID, MAIN, SUBJECT_ID, as_id_list, as_int, find_pair, CARD_ID
from ninpipe import Pipe
from logging import getLogger, basicConfig, INFO, WARNING
from sys import stdout, stdin
import csv

program_name = 'mergedrug'
parser = ArgumentParser(description=f'''
Merge drug information csv file.
It needs csv file from the database.
The csv file needs to involve experiments id and subject id.
    >> {program_name} experiment.csv drugs.csv -o out.csv
''', formatter_class=RawTextHelpFormatter)

if stdin.isatty():
    parser.add_argument(
        'filename',
        type=str,
        help='''File name of subject csv.
    It is regular experimental csv from database.''')

parser.add_argument(
    'drugfile',
    type=str,
    help='''File name of drug csv.
It is drug file from database.''')

parser.add_argument(
    '-o',
    '--output',
    type=str,
    default='out.csv' if stdout.isatty() else None,
    help='''File name to output.
If it is piped, no file will be written.
Default is 'out.csv'.''')

parser.add_argument(
    '-l',
    '--log',
    action='store_true',
    help='''Show information of processing''')

parser.add_argument(
    '--enc',
    type=str,
    default='cp932',
    help='''Name of encoding.[cp932, shift_jis, utf_8]''')

args = parser.parse_args()
basicConfig(level = INFO if args.log else WARNING)
logger = getLogger(program_name)
logger.info(f'( ･`ω･´)< Start running...')


def select_experiment_id(
        id_in_drug: List[int], experimental_id: List[int]) -> int:
    for drug_id, ex_id in product(id_in_drug.split(','), experimental_id):
        if drug_id.strip() == ex_id.strip():
            return ex_id
    return -1

# Read all the csv
if stdin.isatty():
    drugs = SpreadSheet().load_data(Pipe().get_all_lines(), encoding=args.enc)
else:
    drugs = SpreadSheet().load_csv(args.drugfile, encoding=args.enc)
data_list = SpreadSheet().load_csv(args.filename, encoding=args.enc).calc()
experiments = list(data_list[EXPERIMENTAL_ID])

exdrugs = drugs\
    .filter(EXPERIMENTAL_ID, lambda x: any(e in x.split(',') for e in experiments)).calc()
exdrugs = exdrugs\
    .map(EXPERIMENTAL_ID, lambda x: select_experiment_id(x, experiments))\
    .filter(EXPERIMENTAL_ID, lambda x: x != -1).calc()

data_list.concat(EXPERIMENTAL_ID, exdrugs)
result = SpreadSheet()
for ex in experiments:
    try:
        dr = exdrugs.filter(EXPERIMENTAL_ID, lambda x: ex == x).calc()[0]
        da = data_list.filter(EXPERIMENTAL_ID, lambda x: x == ex).calc()[0]
        # da.update(dr)
        dr.update(da)
        result.add_dict(dr)
    except IndexError as er:
        pass
    except BaseException as er:
        raise er

result.to_csv(args.output, encoding=args.enc)
logger.info(f'''(*´∀｀*)< Done! "{args.output}" was written.''')
