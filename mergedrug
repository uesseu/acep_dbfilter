#!/usr/bin/env python3
from typing import List
from spreadsheet2 import SpreadSheet
from textio import TextIO
from itertools import product
from argparse import ArgumentParser, RawTextHelpFormatter
from ninlib import EXPERIMENTAL_ID
from ninpipe import Pipe
from logging import getLogger, basicConfig, INFO, WARNING
from sys import stdin

program_name = 'mergedrug'
parser = ArgumentParser(description=f'''
Merge drug information csv file.
It needs csv file from the database.
The csv file needs to involve experiments id and subject id.
    >> {program_name} experiment.csv drugs.csv
''', formatter_class=RawTextHelpFormatter)

if stdin.isatty():
    parser.add_argument(
        'filename',
        type=str,
        help='''File name of subject csv.
    It is regular experimental csv from database.''')

parser.add_argument(
    'drugfile',
    type=str,
    help='''File name of drug csv.
It is drug file from database.''')

parser.add_argument(
    '-v',
    '--verbose',
    action='store_true',
    help='''Show information of processing.
    If it is configured, stdin involves information.''')

parser.add_argument(
    '--enc',
    type=str,
    default='utf_8',
    help='''Name of encoding.[cp932, shift_jis, utf_8]''')

args = parser.parse_args()
basicConfig(level = INFO if args.verbose else WARNING)
logger = getLogger(program_name)
logger.info(f'( ･`ω･´)< Start running...{program_name}')


def select_experiment_id(id_in_drug: str,
                         experimental_id: List[str]) -> str:
    for drug_id, ex_id in product(
        filter(lambda x: x != '' and x != '0' and x != '00', id_in_drug.split(',')),
            experimental_id):
        if drug_id.strip() == ex_id.strip():
            return ex_id
    return ''


# Read all the csv
if stdin.isatty():
    data_list = SpreadSheet().load_data(TextIO(args.filename).load()).calc()
else:
    data_list = SpreadSheet().load_data(Pipe().get_all_lines()).calc()
with open(args.drugfile, encoding=args.enc) as fp:
    drugs = SpreadSheet().load_data(fp.readlines())
experiments = list(i for i in data_list[EXPERIMENTAL_ID] if i != '')

exdrugs = drugs\
    .filter(EXPERIMENTAL_ID,
            lambda x: any(e in x.split(',') for e in experiments))\
    .map(EXPERIMENTAL_ID, lambda x: select_experiment_id(x, experiments))\
    .filter(EXPERIMENTAL_ID, lambda x: x != '').calc()

# data_list.concat(EXPERIMENTAL_ID, exdrugs)
exdrugs.set_label('drug')
result = SpreadSheet()

res: dict
n = 0
for ex in experiments:
    try:
        dr = exdrugs.filter(EXPERIMENTAL_ID, lambda x: ex == x).calc()
        da = data_list.filter(EXPERIMENTAL_ID, lambda x: x == ex).calc()
        # da.update(dr)
        if (len(dr) != 0):
            tmp_dr = da[0]
            tmp_dr.update(dr[0])
            result.add_dict(tmp_dr)
        else:
            result.add_dict(da[0])
    except IndexError as er:
        raise er
    except BaseException as er:
        raise er
result.to_csv(None, encoding=args.enc)
# stderr.write(str(result.index_keys))
logger.info(f'''(*´∀｀*)< {program_name} has Done!''')
